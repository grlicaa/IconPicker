{"version":3,"names":[],"mappings":"","sources":["IPdoc.js"],"sourcesContent":["/* global fa */\r\n\r\nvar fontapex = fontapex || {};\r\n\r\n//foreach Array for nodeList in IE\r\nif (!NodeList.prototype.forEach) {\r\n  NodeList.prototype.forEach = Array.prototype.forEach;\r\n}\r\n\r\nfunction setElementIcon(p_name, p_val) {\r\n\t$(\"input#\"+p_name+\".apex-item-has-icon\").parent(\"div\").find(\"span.apex-item-icon\").attr(\"class\",\"apex-item-icon fa \"+p_val);\r\n}\r\nfunction setElementValue(p_name, p_val) {\r\n\t$(\"input#\"+p_name).val(p_val);\r\n\tsetElementIcon(p_name, p_val);\r\n}\r\nfunction setIGElementValue(p_regionId, p_rowId, p_column, p_val) {\r\n\tconst widget      = apex.region(p_regionId).widget();\r\n\tconst grid        = widget.interactiveGrid('getViews','grid');  \r\n\tconst model       = grid.model; \r\n    const fields = widget.interactiveGrid('getViews').grid.model.getOption('fields');\r\n\t\r\n    let field = '';\r\n\tfor (var el in fields) {\r\n\t\tif (fields[el].elementId === p_column) {\r\n\t\t\tfield = el;\r\n\t\t}\r\n\t}\r\n    model.setRecordValue(p_rowId, field, p_val);\r\n}\r\nfunction closeDialogIP(is_grid, p_dialog, p_regionId, p_rowId, p_column, p_val) {\r\n\tif (is_grid) {\r\n\t\t$(\"#IconPickerDialogBox\").dialog(\"close\");\r\n\t\tsetIGElementValue(p_regionId, p_rowId, p_column, p_val)\r\n\t\t\r\n\t}\r\n\telse {\r\n\t\tsetElementValue(p_dialog, p_val);\r\n\t\t$(\"#IconPickerDialogBox\").dialog(\"close\");\r\n\t}\r\n}\r\n\r\nfunction addItemList(pItemList) {\r\n\t$(pItemList).each(function () {\r\n        try {\r\n\t\t\t$(this).iconList({\r\n\t\t\t\tmultiple: false,\r\n\t\t\t\tnavigation: true,\r\n\t\t\t\titemSelector: false\r\n\t\t\t});\t\t\r\n        }\r\n        catch(err) {\r\n          console.log(err.message);\r\n        }\t\t\r\n\t});\t\t\t\t\r\n}\r\n\r\nfunction loadIconPickerDialog(pDCloseB, pUseIconList) {\r\n\t$(\"body\").append('<div id=\"IconPickerDialogBox\"></div>');\r\n\t\t/* turn div into dialog */\r\n\t$('#IconPickerDialogBox').dialog(\r\n                {modal : true\r\n                ,title : \"Icon Picker\"\r\n                ,autoOpen:false\r\n                ,resizable:true\r\n                ,width: 600\r\n                ,height: 800\r\n                ,closeOnEscape : true\r\n                ,tirggElem : \"\"\r\n                ,tirggItem : {}\r\n\t\t\t\t,showIconLabel: true\r\n                ,modalItem : false\r\n\t\t\t\t,useIconList: pUseIconList\r\n                ,open: function () {\r\n\t\t\t\t\twindow.addEventListener(\"keydown\", function(event) {\r\n\t\t\t\t\t\t\t// arrow key\r\n\t\t\t\t\t\t\tif ([37, 38, 39, 40].indexOf(event.keyCode) > -1) {\r\n\t\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\t\t\t\t\t\r\n                    initIcons( fontapex, \r\n\t\t\t\t\t           $(this).dialog(\"option\", \"tirggElem\"), \r\n\t\t\t\t\t\t\t   $(this).dialog(\"option\", \"tirggItem\"),  \r\n\t\t\t\t\t\t\t   {\tis_grid:$(this).dialog(\"option\", \"modalItem\"), \r\n\t\t\t\t\t                showIconLabel:$(this).dialog(\"option\", \"showIconLabel\"),\r\n\t\t\t\t\t\t\t\t\tuseIconList:$(this).dialog(\"option\", \"useIconList\")\r\n\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t);\r\n                }\r\n                ,close: function () {\r\n                    $(\"main.dm-Body\").remove();\r\n                }\r\n                ,cancel: function () {\r\n                    $(\"main.dm-Body\").remove();\r\n                }            \r\n                ,buttons :[\r\n\t\t\t\t\t{ \ttext  :pDCloseB,\r\n\t\t\t\t\t\tclick : function () {\r\n\t\t\t\t\t\t\t$(this).dialog(\"close\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                ]\r\n            });\r\n}\r\n\r\nfontapex.$ = function( selector ){\r\n    var Sel = function ( selector ) {\r\n        var selected = [];\r\n\r\n        if ( typeof selector === 'string' ) {\r\n            selected = document.querySelectorAll( selector );\r\n        } else {\r\n            selected.push( selector );\r\n        }\r\n\r\n        this.elements = selected;\r\n        this.length = this.elements.length;\r\n\r\n        return this;\r\n    };\r\n\r\n    Sel.prototype = {\r\n\r\n        addClass: function ( cl ) {\r\n                    // remove multiple spaces\r\n                    var str = cl.replace(/ +(?= )/g,''),\r\n                        classArray = str.split( ' ' );\r\n\r\n                    this.elements.forEach( function ( elem ) {\r\n                        classArray.forEach( function ( c ) {\r\n                            if ( c ) {\r\n                                elem.classList.add( c );\r\n                            }\r\n                        })\r\n\r\n                    });\r\n                    return this;\r\n        },\r\n\r\n        removeClass: function ( cl ) {\r\n\r\n                        var removeAllClasses = function ( el ) {\r\n                            el.className = '';\r\n                        };\r\n\r\n                        var removeOneClass = function ( el ) {\r\n                            el.classList.remove( cl );\r\n                        };\r\n\r\n                        var action = cl ? removeOneClass : removeAllClasses;\r\n\r\n                        this.elements.forEach( function ( elem ) {\r\n                            action( elem );\r\n                        });\r\n\r\n                        return this;\r\n        },\r\n\r\n        getClass: function () {\r\n                    return this.elements[0].classList.value;\r\n        },\r\n\r\n        on: function ( eventName, func ) {\r\n                this.elements.forEach( function( elem ){\r\n                    elem.addEventListener( eventName, func );\r\n                });\r\n\r\n                return this;\r\n        },\r\n\r\n        val: function () {\r\n                var val = '';\r\n                this.elements.forEach( function ( elem ) {\r\n                    switch ( elem.nodeName ) {\r\n                        case 'INPUT':\r\n                            if ( elem.checked ) {\r\n                                val = elem.value;\r\n                            }\r\n                            break;\r\n\r\n                        case 'SELECT':\r\n                            val = elem.options[ elem.selectedIndex ].value;\r\n                            break;\r\n                    }\r\n                });\r\n\r\n                return val;\r\n        },\r\n\r\n        text: function ( t ) {\r\n                if ( t ) {\r\n                    this.elements.forEach( function ( elem ) {\r\n                        elem.textContent = t;\r\n                    });\r\n                }\r\n\r\n                return this;\r\n        },\r\n\r\n        html: function ( h ) {\r\n                var html;\r\n\r\n                if ( typeof h === 'string') {\r\n                    this.elements.forEach( function ( elem ) {\r\n                        elem.innerHTML = h;\r\n                    });\r\n                    return this;\r\n                } else {\r\n                    this.elements.forEach( function ( elem ) {\r\n                        html = elem.innerHTML;\r\n                    });\r\n                    return html;\r\n                }\r\n        },\r\n\r\n        parent: function () {\r\n                    var p;\r\n                    this.elements.forEach( function ( elem ) {\r\n                        p = new Sel( elem.parentNode );\r\n                    });\r\n\r\n                    return p;\r\n        },\r\n\r\n        hide: function () {\r\n                this.elements.forEach( function ( elem ) {\r\n                    elem.style.display = 'none';\r\n                });\r\n\r\n                return this;\r\n        },\r\n\r\n        show: function ( t ) {\r\n                this.elements.forEach( function ( elem ) {\r\n                    elem.style.display = null;\r\n                });\r\n\r\n                return this;\r\n        }\r\n\r\n    };\r\n\r\n    return new Sel( selector );\r\n};\r\n\r\nfunction initIcons( fa, p_dialog, p_item, pOpt) {\r\n    var $ = fa.$,\r\n        L = 'LARGE',\r\n        S = 'SMALL',\r\n\t\tITM = p_item || {regionId:\"\", rowId:\"\", column:\"\"},\r\n        CL_LARGE = 'force-fa-lg',\r\n        wLocation = window.location,\r\n        currentIcon = wLocation.hash.replace( '#', '' ) || 'fa-apex',\r\n        //isLarge = wLocation.search.indexOf( L ) > -1,\r\n        isLarge,\r\n        timeout,\r\n        apexIcons,\r\n        apexIconKeys,\r\n        flattened = [],\r\n        icons$ = $( '#icons' );\r\n\r\n    var _isLarge = function(value){\r\n        if(value){\r\n            try{\r\n                localStorage.setItem(\"large.fontapex\",value);\r\n            }catch(e){\r\n                isLarge = value;\r\n            }\r\n        }else{\r\n            try{\r\n                return localStorage.getItem(\"large.fontapex\") || \"false\";\r\n            }catch(e){\r\n                if (isLarge){\r\n                    return isLarge;\r\n                }else{\r\n                    isLarge = \"false\";\r\n                    return isLarge;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var isPreviewPage = function () {\r\n      return $( '#icon_preview' ).length > 0 ;\r\n    };\r\n\r\n    var highlight = function (txt, str) {\r\n        return txt.replace(new RegExp(\"(\" + str + \")\",\"gi\"), '<span class=\"highlight\">$1</span>');\r\n    };\r\n\r\n    var renderIcons = function( opts ){\r\n        var output;\r\n\r\n        clearTimeout(timeout);\r\n        var debounce = opts.debounce || 50,\r\n            key = opts.filterString || '',\r\n            keyLength = key.length;\r\n\r\n        key = key.toUpperCase().trim();\r\n\r\n        var assembleHTML = function (resultSet, iconCategory) {\r\n            var size = _isLarge() === 'true' ? L : S,\r\n                getEntry = function ( cl ) {\r\n                    return '<li role=\"navigation\">' + \r\n                        '<a class=\"dm-Search-result\" href=\"javascript:closeDialogIP('+pOpt.is_grid+',\\''+p_dialog+'\\',\\''+ITM.regionId+'\\',\\''+ITM.rowId+'\\',\\''+ITM.column+'\\',\\''+ cl +'\\');\" aria-labelledby=\"iplist\">' +\r\n                        '<div class=\"dm-Search-icon\">' +\r\n                        '<span class=\"t-Icon fa '+ cl +'\" aria-hidden=\"true\"></span>' +\r\n                        '</div>' +\r\n\t\t\t\t\t\t(pOpt.showIconLabel?(\r\n                        '<div class=\"dm-Search-info\">' +\r\n                        '<span class=\"dm-Search-class\">'+ cl +'</span>' +\r\n                        '</div>'):'') +\r\n                        '</a>' +\r\n                        '</li>';\r\n                };\r\n\r\n            if (iconCategory) { // keywords is not provided, show everything\r\n                output = output + '<div class=\"dm-Search-category\">';\r\n                output = output + '<h2 class=\"dm-Search-title\">' + iconCategory.replace(/_/g,' ').toLowerCase()+ ' Icons</h2>';\r\n                output = output + '<ul class=\"dm-Search-list\" id=\"iplist\">';\r\n                resultSet.forEach(function(iconClass){\r\n                    output = output + getEntry( iconClass.name );\r\n                });\r\n                output = output + '</ul>';\r\n                output = output + '</div>';\r\n            } else {\r\n                if (resultSet.length > 0) {\r\n                    resultSet.forEach(function (iconClass) {\r\n                        output = output + getEntry( iconClass.name );\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\t\t\r\n\r\n        var search = function () {\r\n            if (key.length === 1) {\r\n                return;\r\n            }\r\n\r\n            var resultSet = [],\r\n                resultsTitle = '';\r\n\r\n            output = '';\r\n\r\n            if (key === '') { // no keywords provided, display all icons.\r\n                apexIconKeys.forEach(function(iconCategory){\r\n                    resultSet = apexIcons[iconCategory].sort(function (a, b) {\r\n                        if (a.name < b.name) {\r\n                            return -1;\r\n                        } else if (a.name > b.name) {\r\n                            return 1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }); // no keywords, no search. Just sort.\r\n                    assembleHTML(resultSet, iconCategory);\r\n                });\r\n            } else {\r\n                resultSet = flattened.filter(function(curVal){\r\n                    var name     = curVal.name.toUpperCase().slice(3), // remove the prefix 'fa-'\r\n                        nameArr,\r\n                        filters  = curVal.filters ? curVal.filters.toUpperCase() : '',\r\n                        filtersArr,\r\n                        firstXletters,\r\n                        rank = 0,\r\n                        i, filterArrLen, j, nameArrLen;\r\n\r\n                    if (key.indexOf(' ') > 0) {\r\n                        key = key.replace(' ', '-');\r\n                    }\r\n\r\n                    if (name.indexOf(key) >= 0) {\r\n                        // convert names to array for ranking\r\n                        nameArr = name.split('-');\r\n                        nameArrLen = nameArr.length;\r\n                        // rank: doesn't have \"-\"\r\n                        if (name.indexOf('-') < 0) {\r\n                            rank += 1000;\r\n                        }\r\n                        // rank: matches the whole name\r\n                        if (name.length === keyLength) {\r\n                            rank += 1000;\r\n                        }\r\n                        // rank: matches partial beginning\r\n                        firstXletters = nameArr[0].slice(0, keyLength);\r\n                        if (firstXletters.indexOf(key) >= 0) {\r\n                            rank += 1000;\r\n                        }\r\n                        for (j = 0; j < nameArrLen; j++) {\r\n                            if (nameArr[j]) {\r\n                                if (nameArr[j].indexOf(key) >= 0) {\r\n                                    rank += 100;\r\n                                }\r\n                            }\r\n                        }\r\n                        curVal.rank = rank;\r\n                        return true;\r\n                    }\r\n\r\n                    // convert words in filters to array\r\n                    filtersArr = filters.split(',');\r\n                    filterArrLen = filtersArr.length;\r\n                    // keywords matches in filters field.\r\n                    for (i = 0; i < filterArrLen; i ++) {\r\n                        firstXletters = filtersArr[i].slice(0, keyLength);\r\n                        if (firstXletters.indexOf(key) >= 0) {\r\n                            curVal.rank = 1;\r\n                            return true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                resultSet.sort(function (a, b) {\r\n                    var ar = a.rank,\r\n                        br = b.rank;\r\n                    if (ar > br) {\r\n                        return -1;\r\n                    } else if (ar < br) {\r\n                        return 1;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                });\r\n\r\n                assembleHTML(resultSet);\r\n\r\n                // search results UI doesn't require category title\r\n                resultsTitle = resultSet.length === 0 ? 'No results' : resultSet.length + ' Results';\r\n                output = '<div class=\"dm-Search-category\">' +\r\n                    '<h2 class=\"dm-Search-title\">' + resultsTitle + '</h2>' +\r\n                    '<ul class=\"dm-Search-list\" id=\"iplist\">' +\r\n                    output +\r\n                    '</ul>';\r\n                output = output + '</div>';\r\n            }\r\n\r\n            // finally add output\r\n            document.getElementById( 'icons' ).innerHTML = output;\r\n\t\t\t\r\n        };\r\n\r\n        timeout = setTimeout(function() {\r\n            search();\r\n\t\t\tif (pOpt.useIconList)\r\n\t\t\t\taddItemList('ul#iplist');\r\n        }, debounce);\r\n\t\t\r\n\t\t\r\n    };\r\n\r\n    var toggleSize = function ( that, affected ) {\r\n        that.checked = true;\r\n        if ( that.value === L ) {\r\n            affected.addClass( CL_LARGE );\r\n            //isLarge = true;\r\n            _isLarge('true');\r\n        } else {\r\n            affected.removeClass( CL_LARGE );\r\n            _isLarge('false');\r\n        }\r\n    };\r\n\r\n\tvar downlodSVGBtn = function () {\r\n        $( 'button.pv-Button' ).on( 'click', function () {\r\n            var size = _isLarge() === 'true' ? L.toLowerCase() : S.toLowerCase();\r\n            window.open( '../svgs/' + size + '/' + currentIcon.replace( 'fa-', '' ) + '.svg' );\r\n        });\r\n    };\r\n\r\n\t\r\n    if ( isPreviewPage() ) {\r\n        if ( _isLarge() === 'true' ){\r\n            document.getElementById( 'icon_size_large' ).checked = true;\r\n            icons$.addClass( CL_LARGE );\r\n        } else {\r\n            document.getElementById( 'icon_size_small' ).checked = true;\r\n            icons$.removeClass( CL_LARGE );\r\n        }\r\n\r\n        if ( currentIcon ) {\r\n            $( '.dm-Icon-name' )\r\n                .text( currentIcon );\r\n\r\n            $( '[data-icon]' )\r\n                .removeClass( 'fa-apex' )\r\n                .addClass( currentIcon );\r\n\r\n            renderIconPreview();\r\n            downlodSVGBtn();\r\n        }\r\n\r\n        // icon preview modifiers\r\n        $( 'input, select' )\r\n            .on( 'change', function () {\r\n                renderIconPreview();\r\n            });\r\n\r\n    } else {\r\n        // Index Page\r\n        if ( _isLarge() === 'true' ){\r\n            document.getElementById( 'icon_size_large' ).checked = true;\r\n            icons$.addClass( CL_LARGE );\r\n        } else {\r\n            document.getElementById( 'icon_size_small' ).checked = true;\r\n            icons$.removeClass( CL_LARGE );\r\n        }\r\n\r\n        if ( fa.icons ) {\r\n            renderIcons({});\r\n\r\n            flattened = function () {\r\n                var set = [];\r\n\r\n                apexIcons    = fa.icons;\r\n                apexIconKeys = Object.keys( apexIcons );\r\n\r\n                apexIconKeys.forEach(function(iconCategory) {\r\n                    set = set.concat( apexIcons[iconCategory] );\r\n                });\r\n\r\n                return set;\r\n            }();\r\n\r\n            $( '#search' ).on( 'keyup', function ( e ) {\r\n                renderIcons({\r\n                    debounce: 250,\r\n                    filterString: e.target.value\r\n                });\r\n            } );\r\n\r\n            // Size Toggle\r\n            $( '[name=\"icon_size\"]' ).on( 'click', function ( e ) {\r\n                var affectedElem =  icons$.length > 0 ? icons$ : $( '.dm-IconPreview' );\r\n                toggleSize( this, affectedElem );\r\n            } );\r\n\t\t\t\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n}\r\n"],"file":"IPdoc.js"}